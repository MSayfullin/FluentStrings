{"name":"Fluentstrings","tagline":"Powerful set of utilities for any kind of string transformation with fluent interface","body":"# Fluent Strings\r\n\r\nPowerful set of utilities for any kind of string transformations with fluent interface.\r\n\r\n```\r\nProject is still in development and some interfaces could be changed\r\n```\r\n\r\n## Download\r\n\r\nFluent Strings can be downloaded either through [NuGet package](https://nuget.org/packages/dokas.FluentStrings/)\r\nor as a [zip archive](http://fluentstrings.codeplex.com/releases)\r\n\r\n## Examples\r\n\r\nLet the code speak for itself.\r\n\r\n### Insert operations\r\n\r\nSomething simple at the beginning:\r\n```csharp\r\nstring transformed = \"<-- some string will be inserted here\".Insert(\"I am inserted!\");\r\ntransformed.Should().Be(\"I am inserted!<-- some string will be inserted here\");\r\n```\r\nLet's change the position:\r\n```csharp\r\nstring transformed = \"Some string will be inserted here -->\".Insert(\"I am inserted!\").To(The.End);\r\ntransformed.Should().Be(\"Some string will be inserted here -->I am inserted!\");\r\n```\r\n\r\nAnd simply put something at the position we want:\r\n```csharp\r\nstring transformed = \"Start of the sentence <-- some string will be inserted here\".Insert(\"I am inserted!\").At(22);\r\ntransformed.Should().Be(\"Start of the sentence I am inserted!<-- some string will be inserted here\");\r\n```\r\n\r\nMixing up with markers:\r\n```csharp\r\nstring transformed = \"MARKER, another maRKer and... marker <-- some string will be inserted here\"\r\n                      .Insert(\"I am inserted!\").After(\"marker \");\r\ntransformed.Should().Be(\"MARKER, another maRKer and... marker I am inserted!<-- some string will be inserted here\");\r\n```\r\n\r\nEven ignoring case:\r\n```csharp\r\nstring transformed = \"Marker1, another maRKer2 and... marker <-- some string will be inserted here\"\r\n                     .Insert(\"I am inserted\").After(\"MARKER \").IgnoringCase();\r\ntransformed.Should().Be(\"Marker1, another maRKer2 and... marker I am inserted<-- some string will be inserted here\");\r\n```\r\n\r\nAnd applying all the power:\r\n```csharp\r\nstring t = \"Some string will be inserted before this second 'some' word, but not before this 'some'\"\r\n           .Insert(\"I am inserted! \").Before(2, \"some\").IgnoringCase().From(The.Beginning);\r\nt.Should().Be(\"Some string will be inserted before this second 'I am inserted! some' word, but not before this 'some'\");\r\n```\r\n\r\n### Remove operations\r\n\r\nEliminating totally:\r\n```csharp\r\nstring transformed = \"Some string\".Remove();\r\ntransformed.Should().Be(String.Empty);\r\n```\r\n\r\nOr part...\r\n```csharp\r\nstring transformed = \"THIS part of string will be removed\".Remove(\"THIS\");\r\ntransformed.Should().Be(\" part of string will be removed\");\r\n```\r\n\r\n...by part:\r\n```csharp\r\nstring transformed = \"THIS <- this string will be left, but this will be removed -> THIS\".Remove(\"THIS\").From(The.End);\r\ntransformed.Should().Be(\"THIS <- this string will be left, but this will be removed -> \");\r\n```\r\n\r\nBy counting markers:\r\n```csharp\r\nstring transformed = \"String will be removed ->TEST and this will be removed also ->TEST, except this ->TEST\"\r\n                     .Remove(2, \"TEST\");\r\ntransformed.Should().Be(\"String will be removed -> and this will be removed also ->, except this ->TEST\");\r\n```\r\n\r\nOr all of them at once:\r\n```csharp\r\nstring transformed = \"TEST string will be removed from both sides TEST\".RemoveAll(\"tESt\").IgnoringCase();\r\ntransformed.Should().Be(\" string will be removed from both sides \");\r\n```\r\n\r\n*More is comming soon...*\r\n\r\n### Remove operations for chars\r\n\r\nCreating cool effects:\r\n```csharp\r\nstring transformed = \"Vowels will be removed from this string\".RemoveVowels();\r\ntransformed.Should().Be(\"Vwls wll b rmvd frm ths strng\");\r\n```\r\n\r\nFor different culture as well:\r\n```csharp\r\nstring transformed = \"Очень длинная строка с русскими буквами, ё\".RemoveVowels().For(\"ru\");\r\ntransformed.Should().Be(\"чнь длнн стрк с рсскм бквм, \");\r\n```\r\n\r\nOr by specifying chars explicitly:\r\n```csharp\r\nstring transformed = \"Some very long string\".RemoveChars('e', 'L', 'G').IgnoringCase();\r\ntransformed.Should().Be(\"Som vry on strin\");\r\n```\r\n\r\n### Replace operations\r\n\r\n*Coming soon...*\r\n\r\n### Truncate operations\r\n\r\nJust playing around:\r\n```csharp\r\nstring transformed = \"Some very long string\".TruncateTo(9);\r\ntransformed.Should().Be(\"Some very\");\r\n\r\ntransformed = \"Some very long string\".TruncateTo(11).From(The.End);\r\ntransformed.Should().Be(\"long string\");\r\n```\r\n\r\nAnd doing ellipsis:\r\n```csharp\r\nstring transformed = \"Some very long string\".TruncateTo(12).WithEllipsis();\r\ntransformed.Should().Be(\"Some very...\");\r\n```\r\n\r\n### Utility operations\r\n\r\nBetter approach for well known:\r\n```csharp\r\nbool isEmpty = \"\".IsEmpty();\r\nisEmpty.Should().Be(true);\r\n```\r\n\r\nEven for `null` case:\r\n```csharp\r\nstring sample = null;\r\nbool isEmpty = sample.IsEmpty();\r\nisEmpty.Should().Be(true);\r\n```\r\n\r\nAnd continuing for white spaces:\r\n```csharp\r\nbool isEmptyOrWhiteSpace = \"  \".IsEmpty().OrWhiteSpace();\r\nisEmptyOrWhiteSpace.Should().Be(true);\r\n```\r\n\r\nExtending the basics:\r\n```csharp\r\nvar indexes = \"marker with another text marker and another text marker marker\".IndexesOf(\"marker\");\r\nindexes.Should().ContainInOrder(0, 25, 49, 56);\r\n```\r\n\r\nBreaking restrictions:\r\n```csharp\r\nvar indexes = \"Some text MARKER another text MarKer marker\".IndexesOf(\"mArkEr\").IgnoringCase();\r\nindexes.Should().ContainInOrder(10, 30, 37);\r\n```\r\n\r\nAnd plainly reverse the order:\r\n```csharp\r\nvar indexes = \"marker with another text marker and another text marker marker\".IndexesOf(\"marker\").From(The.End);\r\nindexes.Should().ContainInOrder(56, 49, 25, 0);\r\n```\r\n\r\n*More examples could be found in [test classes](https://github.com/MSayfullin/FluentStrings/tree/master/FluentStrings.Tests)*\r\n\r\n## License\r\n\r\n[Ms-PL](https://github.com/MSayfullin/FluentStrings/blob/master/LICENSE)\r\n\r\n## Credits\r\n\r\nMany thanks to [Fluent Assertions](http://fluentassertions.codeplex.com/) for making my testing experience awesome.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}